from itertools import permutations

def calculate_total_distance(route, distances):
    total_distance = 0
    for i in range(len(route) - 1):
        total_distance += distances[route[i]][route[i + 1]]
    total_distance += distances[route[-1]][route[0]]  # Return to the starting city
    return total_distance

def traveling_salesman_bruteforce(distances):
    num_cities = len(distances)
    all_routes = permutations(range(num_cities))
    min_distance = float('inf')
    best_route = None
    for route in all_routes:
        current_distance = calculate_total_distance(route, distances)
        if current_distance < min_distance:
            min_distance = current_distance
            best_route = route
    return best_route, min_distance

def get_distances_from_user(num_cities):
    distances = []
    for i in range(num_cities):
        row = list(map(int, input(f"Enter distances from city {i + 1} to all other cities separated by space: ").split()))
        distances.append(row)
    return distances

def main():
    num_cities = int(input("Enter the number of cities: "))
    distances = get_distances_from_user(num_cities)
    best_route, min_distance = traveling_salesman_bruteforce(distances)
    print("Best Route:", best_route)
    print("Minimum Distance:", min_distance)

if __name__ == "__main__":
    main()

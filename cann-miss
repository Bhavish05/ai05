class State:
    def __init__(self, missionaries, cannibals, boat):
        self.missionaries = missionaries
        self.cannibals = cannibals
        self.boat = boat

    def __eq__(self, other):
        return self.missionaries == other.missionaries and \
               self.cannibals == other.cannibals and \
               self.boat == other.boat

    def __hash__(self):
        return hash((self.missionaries, self.cannibals, self.boat))

    def __str__(self):
        return f'M({self.missionaries}) C({self.cannibals}) B({self.boat})'

    def is_valid(self):
        if self.missionaries < 0 or self.cannibals < 0:
            return False
        if self.missionaries > 3 or self.cannibals > 3:
            return False
        if self.cannibals > self.missionaries > 0 or \
           self.cannibals < self.missionaries < 3:
            return False
        return True

    def is_goal(self):
        return self.missionaries == 0 and self.cannibals == 0 and self.boat == 0


def successors(state):
    children = []
    if state.boat == 1:
        for i in range(3):
            for j in range(3):
                new_state = State(state.missionaries - i, state.cannibals - j, 0)
                if 1 <= i + j <= 2 and new_state.is_valid():
                    children.append(new_state)
    else:
        for i in range(3):
            for j in range(3):
                new_state = State(state.missionaries + i, state.cannibals + j, 1)
                if 1 <= i + j <= 2 and new_state.is_valid():
                    children.append(new_state)
    return children


def dfs(start):
    stack = [(start, [])]
    while stack:
        (state, path) = stack.pop()
        if state.is_goal():
            return path + [state]
        for child in successors(state):
            if child not in path:
                stack.append((child, path + [state]))
    return None


def print_solution(solution):
    for i, state in enumerate(solution):
        print(f"Step {i}: {state}")


if __name__ == "__main__":
    initial_state = State(3, 3, 1)
    solution = dfs(initial_state)
    if solution:
        print("Solution found:")
        print_solution(solution)
    else:
        print("No solution exists.")

